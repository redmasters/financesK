name: Build and Deploy to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: redmater/financesk

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests
      run: ./gradlew test --no-daemon

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Gradle Tests
        path: build/test-results/test/*.xml
        reporter: java-junit

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Get version from build.gradle.kts
      id: get_version
      run: |
        VERSION=$(grep "version = " build.gradle.kts | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Generate semantic version
      id: semantic_version
      run: |
        # Pega a vers√£o base do build.gradle.kts
        BASE_VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        # Remove SNAPSHOT se existir
        CLEAN_VERSION=$(echo $BASE_VERSION | sed 's/-SNAPSHOT//')
        
        # Gera timestamp para tornar √∫nica
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        
        # Vers√£o com timestamp
        VERSIONED_TAG="${CLEAN_VERSION}.${TIMESTAMP}"
        
        echo "VERSIONED_TAG=$VERSIONED_TAG" >> $GITHUB_OUTPUT
        echo "BASE_VERSION=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSIONED_TAG"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest
          type=raw,value=${{ steps.semantic_version.outputs.VERSIONED_TAG }}
          type=raw,value=${{ steps.semantic_version.outputs.BASE_VERSION }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ steps.semantic_version.outputs.VERSIONED_TAG }}
          ${{ env.IMAGE_NAME }}:${{ steps.semantic_version.outputs.BASE_VERSION }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Update deployment status
      if: success()
      run: |
        echo "‚úÖ Successfully deployed:"
        echo "- Latest: ${{ env.IMAGE_NAME }}:latest"
        echo "- Versioned: ${{ env.IMAGE_NAME }}:${{ steps.semantic_version.outputs.VERSIONED_TAG }}"
        echo "- Base: ${{ env.IMAGE_NAME }}:${{ steps.semantic_version.outputs.BASE_VERSION }}"

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.semantic_version.outputs.VERSIONED_TAG }}
        release_name: Release v${{ steps.semantic_version.outputs.VERSIONED_TAG }}
        body: |
          üöÄ **Automated Release**
          
          **Changes:**
          - Deployed from commit: ${{ github.sha }}
          - Docker Images:
            - `${{ env.IMAGE_NAME }}:latest`
            - `${{ env.IMAGE_NAME }}:${{ steps.semantic_version.outputs.VERSIONED_TAG }}`
            - `${{ env.IMAGE_NAME }}:${{ steps.semantic_version.outputs.BASE_VERSION }}`
          
          **Deployment Info:**
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Deployed at: ${{ github.event.head_commit.timestamp }}
          
          View on [Docker Hub](https://hub.docker.com/r/redmater/financesk)
        draft: false
        prerelease: false

  notify-success:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Deployment Success Notification
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "Docker images are now available at: https://hub.docker.com/r/redmater/financesk"

  notify-failure:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Deployment Failure Notification
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for more details."
        exit 1
